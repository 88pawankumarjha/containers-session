Shared:
  Lab: http://labsap.s3-website-us-west-1.amazonaws.com/
  Docs: https://drive.google.com/drive/folders/15Rg9bU1PTOw19oIQDel7E4meppiJhT9k?usp=sharing

  Git hub:
  git clone https://github.com/mohanraz81/awslogs.git
  git clone https://github.com/mohanraz81/kube_install_kops.git
  git clone https://github.com/mohanraz81/myapp1808.git

  
  Student 10

  Lab: http://labsap.s3/-website-us-west-1.amazonaws.com
Docs: https://drive.google.com/drive/folders/15Rg9bU1PTOw19oIQDel7E4meppiJhT9k?usp=sharing

ec2-54-92-182-52.compute-1.amazonaws.com

# Docker file for Cart Frontend
FROM centos:7
RUN yum -y update
ADD scripts /opt
RUN chmod +x /opt/*.sh
RUN /opt/packages.sh
ADD config /root
RUN chmod +x /root/myenv.sh; source /root/myenv.sh
ADD code /var/www/html
CMD ["httpd", "-D", "FOREGROUND"]


---------------------------------------------------------------------
scripts/packages.sh

#!/bin/bash
yum -y install httpd php php-gd php-mysql

--------------------------------------------------------------------
config/myenv.sh

#!/bin/bash
if [ $1 -eq "dev" ]
then
   export MY_DB_HOST_WRITE=mydb.example.com
else
    export MY_DB_HOST_WRITE=mydbprod.example.com
fi


----------------------------------------------------------
code/index.php

<?php
echo "<h1> This is the Three Tier Architecture Test New Mytest</h1>";
echo "<h3> Your Web Running Apache with php on Frontend container </h3>";
echo "<h3> Your APP Running Test  Apache and PHP providing API services for User information on url http://backend/get_user_details </h2>";
echo "<h3> Your Database running Mysql/Mariadb holding user information in userdb on users Table </h1>";
function insertlabassoc($dbo,$sql)
{
        $dbo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        $stmt = $dbo->prepare($sql);
        $stmt->execute();
}
$labdbhost_name =  getenv("MY_DB_HOST_WRITE");
$labdbhost_read_name =  getenv("MY_DB_HOST_READ");
$labdatabase =  getenv("MY_DB_NAME");
$labusername = getenv("MY_DB_USER");
$labpassword = getenv("MY_DB_PASS");
try
{
        $dbo = new PDO('mysql:host='.$labdbhost_name.';dbname='.$labdatabase, $labusername, $labpassword);
}
catch (PDOException $e)
{
        print "We have trouble in our System we will be back soon.";
        die();
}
$candl_backend_query = "CREATE TABLE IF NOT EXISTS `users` (`id` int(11) NOT NULL AUTO_INCREMENT,  `Name` varchar(50) NOT NULL, `Age` smallint(2) NOT NULL, `Email` varchar(50) NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4; INSERT INTO `users` (`id`, `Name`, `Age`, `Email`) VALUES(1, 'Mohan', 18, 'mohanraz@gmail.com'),(2, 'Raj', 22, 'mohan@y2ytech.com'),(3, 'veer', 18, 'mohanraz@gmail.com'),(4, 'Raj', 22, 'mohan@y2ytech.com');";
$candl_backend_array = insertlabassoc($dbo, $candl_backend_query );
function querymultirowlab($dbo,$sql)
{
        $dbo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        $stmt = $dbo->prepare($sql);
        $stmt->execute();
        $r = $stmt->fetchall();
        return $r;
}
try
{
        $dbo = new PDO('mysql:host='.$labdbhost_read_name.';dbname='.$labdatabase, $labusername, $labpassword);
}
catch (PDOException $e)
{
        print "We have trouble in our System we will be back soon.";
        die();
}
$candl_backend_query = "select * from users";
$candl_backend_array = querymultirowlab($dbo, $candl_backend_query );
foreach($candl_backend_array as $value)
{
        echo "Name"."=>".$value['Name']."<br>";
        echo "Age"."=>".$value['Age']."<br>";
        echo "Email"."=>".$value['Email']."<br>";
        echo "==========================================="."<br>";
}
?>




Mine:
  commands:
    pwd -- /home/ec2-user/environment
    sudo yum -y install docker
    sudo chkconfig docker on

    sample commands for creating and running an existing image:
      docker run -d -p 9000:80 --name testapache httpd:2.4
      docker inspect testapache|grep -i pid
      ps -eaf|grep 4077
      sudo bash
      docker start testapache
      docker stop testapache
      docker rm testapache



  break:
    stop, rm, build with ro, run, 
